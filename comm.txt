[Unit]
Description=UDP-UART Bridge Service
After=network.target

[Service]
ExecStart=/usr/bin/python3 /home/pi/bridge.py
WorkingDirectory=/home/pi
StandardOutput=inherit
StandardError=inherit
Restart=always
User=pi

[Install]
WantedBy=multi-user.target



interface=wlan0
driver=nl80211
ssid=BoatController
hw_mode=g
channel=7
wmm_enabled=0
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=remote1234
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP



interface=wlan0
dhcp-range=192.168.10.100,192.168.10.200,255.255.255.0,24h




interface wlan0
static ip_address=192.168.10.1/24
nohook wpa_supplicant

sudo systemctl unmask hostapd
sudo systemctl enable hostapd
sudo systemctl enable dnsmasq
sudo reboot




sudo apt install cmake libjpeg8-dev
git clone https://github.com/jacksonliam/mjpg-streamer.git
cd mjpg-streamer/mjpg-streamer-experimental
make
sudo make install

# Start streaming (add to /etc/rc.local for auto-start)
./mjpg_streamer -o "output_http.so -w ./www" -i "input_raspicam.so -x 640 -y 480 -fps 15"



sudo nano /etc/systemd/system/bridge.service

[Unit]
Description=UDP-UART Bridge Service
After=network.target

[Service]
ExecStart=/usr/bin/python3 /home/pi/bridge.py
WorkingDirectory=/home/pi
StandardOutput=inherit
StandardError=inherit
Restart=always
User=pi

[Install]
WantedBy=multi-user.target


sudo systemctl daemon-reload
sudo systemctl enable bridge.service
sudo systemctl start bridge.service


auto wlan0
iface wlan0 inet static
    address 192.168.10.1
    netmask 255.255.255.0
    network 192.168.10.0
    broadcast 192.168.10.255


    sudo nano /etc/systemd/system/hostapd.service

    [Unit]
Description=HostAPD for BoatController
After=network.target

[Service]
ExecStart=/usr/sbin/hostapd /etc/hostapd/hostapd.conf -B
Restart=always

[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl enable hostapd.service
sudo systemctl start hostapd.service

sudo iw list | grep "Supported interface modes" -A 8

# Check IP assignment
ip addr show wlan0

# Check routing
ip route

# Check firewall
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo iptables -A FORWARD -i wlan0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i eth0 -o wlan0 -j ACCEPT

sudo systemctl status hostapd
iwconfig